report: "report/workflow.rst"
configfile: "config/config.yaml"

include: "common.smk"

# Do we need extra combinations of file names to accommodate trimming
# forward and reverse reads? (See rule all)
file_extension = ''
if config['paired_end']:
    file_extension = ['.R1','.R2']

rule all:
    input:
        # Bedgraph files of the ChIP samples
        expand("results/{sample}.bedgraph", sample=config["inputs"].keys()) if config['bedgraph'] else [],
        # Same results, but bigwig output
        expand("results/{sample}.bw", sample=config["inputs"].keys()) if config['bigwig'] else [],
        # Read counts at various stages
        expand("results/readcounts/{sample}.txt", sample=config["inputs"].keys()),
        expand("results/readcounts/{sample}.txt", sample=config["inputs"].values()),
        # Initial FastQC reports
        expand("results/qc/initial/{sample}{ext}_fastqc.html", sample=config["inputs"].keys(), ext=file_extension),
        expand("results/qc/initial/{sample}{ext}_fastqc.html", sample=config["inputs"].values(), ext=file_extension),
        # Trimmed FastQC reports
        expand("results/qc/trimmed/{sample}{ext}_fastqc.html", sample=config["inputs"].keys(), ext=file_extension),
        expand("results/qc/trimmed/{sample}{ext}_fastqc.html", sample=config["inputs"].values(), ext=file_extension)

if config['trim']:
    if config['paired_end']:
        rule trimmomatic_paired:
            input:
                "resources/reads/{sample}.R1.fastq.gz",
                "resources/reads/{sample}.R2.fastq.gz",
            output:
                "results/trimmed/{sample}.R1.fastq.gz",
                "results/trimmed/{sample}.R1.unpaired.fastq.gz",
                "results/trimmed/{sample}.R2.fastq.gz",
                "results/trimmed/{sample}.R2.unpaired.fastq.gz",
            log:
                "logs/trimmomatic/{sample}.log"
            container:
                "docker://staphb/trimmomatic:0.38"
            resources:
                memory=12
            shell:
                # "java -jar /Trimmomatic-0.38/trimmomatic-0.38.jar SE -threads 16 {input} {output} ILLUMINACLIP:/home/rabdill/snakemake-chipseq/resources/truseq_adapters.fasta:2:20:5 SLIDINGWINDOW:4:20 CROP:65 MINLEN:20"
                "java -jar /Trimmomatic-0.38/trimmomatic-0.38.jar PE -threads 16 "
                "{input} {output} ILLUMINACLIP:/home/rabdill/snakemake-chipseq/resources/truseq_adapters.fasta:2:20:5 "
                "SLIDINGWINDOW:4:20 MINLEN:20"
        rule fastqc_initial1: # NOTE: FastQC won't run unless you add the outputs to "rule all" above
            input:
                "resources/reads/{sample}.R1.fastq.gz"
            output:
                "results/qc/initial/{sample}.R1_fastqc.html"
            log:
                "logs/fastqc/{sample}.R1.initial"
            container:
                "docker://staphb/fastqc:0.11.9"
            resources:
                memory=4
            shell:
                "fastqc {input} --noextract --threads 16 --outdir results/qc/initial"
        rule fastqc_trimmed1:
            input:
                "results/trimmed/{sample}.R1.fastq.gz"
            output:
                "results/qc/trimmed/{sample}.R1_fastqc.html",
                "results/qc/trimmed/{sample}.R1_fastqc.zip"
            log:
                "logs/fastqc/{sample}.R1.aftertrim"
            container:
                "docker://staphb/fastqc:0.11.9"
            resources:
                memory=4
            shell:
                "fastqc {input} --noextract --threads 16 --outdir results/qc/trimmed"
        rule fastqc_initial2: # NOTE: FastQC won't run unless you add the outputs to "rule all" above
            input:
                "resources/reads/{sample}.R2.fastq.gz"
            output:
                "results/qc/initial/{sample}.R2_fastqc.html"
            log:
                "logs/fastqc/{sample}.R2.initial"
            container:
                "docker://staphb/fastqc:0.11.9"
            resources:
                memory=4
            shell:
                "fastqc {input} --noextract --threads 16 --outdir results/qc/initial"
        rule fastqc_trimmed2:
            input:
                "results/trimmed/{sample}.R2.fastq.gz"
            output:
                "results/qc/trimmed/{sample}.R2_fastqc.html",
                "results/qc/trimmed/{sample}.R2_fastqc.zip"
            log:
                "logs/fastqc/{sample}.R2.aftertrim"
            container:
                "docker://staphb/fastqc:0.11.9"
            resources:
                memory=4
            shell:
                "fastqc {input} --noextract --threads 16 --outdir results/qc/trimmed"
    else:
        rule fastqc_initial: # NOTE: FastQC won't run unless you add the outputs to "rule all" above
            input:
                "resources/reads/{sample}.fastq.gz"
            output:
                "results/qc/initial/{sample}_fastqc.html"
            log:
                "logs/fastqc/{sample}.initial"
            container:
                "docker://staphb/fastqc:0.11.9"
            resources:
                memory=4
            shell:
                "fastqc {input} --noextract --threads 16 --outdir results/qc/initial"
        rule trimmomatic:
            input:
                "resources/reads/{sample}.fastq.gz"
            output:
                "results/trimmed/{sample}.fastq.gz"
            log:
                "logs/trimmomatic/{sample}.log"
            container:
                "docker://staphb/trimmomatic:0.38"
            resources:
                memory=12
            shell:
                # "java -jar /Trimmomatic-0.38/trimmomatic-0.38.jar SE -threads 16 {input} {output} ILLUMINACLIP:/home/rabdill/snakemake-chipseq/resources/truseq_adapters.fasta:2:20:5 SLIDINGWINDOW:4:20 CROP:65 MINLEN:20"
                "java -jar /Trimmomatic-0.38/trimmomatic-0.38.jar SE -threads 16 {input} {output} ILLUMINACLIP:/home/rabdill/snakemake-chipseq/resources/truseq_adapters.fasta:2:20:5 SLIDINGWINDOW:4:20 MINLEN:20"
        rule fastqc_trimmed:
            input:
                "results/trimmed/{sample}.fastq.gz"
            output:
                "results/qc/trimmed/{sample}_fastqc.html",
                "results/qc/trimmed/{sample}_fastqc.zip"
            log:
                "logs/fastqc/{sample}.aftertrim"
            container:
                "docker://staphb/fastqc:0.11.9"
            resources:
                memory=4
            shell:
                "fastqc {input} --noextract --threads 16 --outdir results/qc/trimmed"

if config['aligner'] == 'bowtie':
    if config['paired_end']:
        rule bowtie_align_paired:
            input:
                # There are multiple index files required here, but we
                # list one with the assumption that the rest are always
                # with it
                ref="/home/rabdill/snakemake-chipseq/resources/bowtie_ref/GRCh38/GRCh38_noalt_as.1.bt2",
                fastq1=which_fastq_r1,
                fastq2=which_fastq_r2
            output:
                "results/mapped/{sample}.sam"
            log:
                "logs/bowtie/{sample}"
            container:
                "docker://biocontainers/bowtie2:v2.4.1_cv1"
            resources:
                memory=12
            shell:
                "bowtie2 -p 16 -q --local "
                    "-x /home/rabdill/snakemake-chipseq/resources/bowtie_ref/GRCh38/GRCh38_noalt_as "
                    "-1 {input.fastq1} -2 {input.fastq2} -X 300 "
                    "-S {output} 2> {log}.err"
    else:
        rule bowtie_align_single:
            input:
                # There are multiple index files required here, but we
                # list one with the assumption that the rest are always
                # with it
                ref="/home/rabdill/snakemake-chipseq/resources/bowtie_ref/GRCh38/GRCh38_noalt_as.1.bt2",
                fastq=which_fastq
            output:
                "results/mapped/{sample}.sam"
            log:
                "logs/bowtie/{sample}"
            container:
                "docker://biocontainers/bowtie2:v2.4.1_cv1"
            resources:
                memory=12
            shell:
                "bowtie2 -p 16 -q --local "
                    "-x /home/rabdill/snakemake-chipseq/resources/bowtie_ref/GRCh38/GRCh38_noalt_as "
                    "-U {input.fastq} "
                    "-S {output} 2> {log}.err"

elif config['aligner'] == 'bwa':
    rule bwa_aln:
        input:
            "/home/rabdill/snakemake-chipseq/resources/bwa_ref/Homo_sapiens.GRCh38.dna_rm.primary_assembly.fa.gz",
            which_fastq
        output:
            "results/mapped/index/{sample}.sai"
        log:
            "logs/bwa/{sample}.aln"
        container:
            "docker://biocontainers/bwa:v0.7.17_cv1"
        resources:
            memory=12
        shell:
            "bwa aln -t 16 -q 5 -l 25 -k 2 {input} > {output}"

    rule bwa_samse:
        input:
            "/home/rabdill/snakemake-chipseq/resources/bwa_ref/Homo_sapiens.GRCh38.dna_rm.primary_assembly.fa.gz",
            "results/mapped/index/{sample}.sai",
            which_fastq
        output:
            "results/mapped/{sample}.sam"
        log:
            "logs/bwa/{sample}.samse"
        container:
            "docker://biocontainers/bwa:v0.7.17_cv1"
        resources:
            memory=12
        shell:
            "bwa samse {input} > {output}"

rule sam_to_bam:
    input:
        "results/mapped/{sample}.sam"
    output:
        "results/mapped/unsorted/{sample}.bam"
    log:
        "logs/samtools/{sample}.view"
    container:
        "docker://kfdrc/samtools:1.9"
    resources:
        memory=12
    shell: # "-bF 4" also filters out unmapped reads
        "samtools view -S -bF 4 {input} > {output}"

rule sort_bam:
    input:
        "results/mapped/unsorted/{sample}.bam"
    output:
        "results/mapped/sorted/{sample}.bam"
    log:
        "logs/samtools/{sample}.sort"
    container:
        "docker://kfdrc/samtools:1.9"
    resources:
        memory=12
    shell:
        "samtools sort -l 9 -O bam -@ 10 -o {output} {input}" # 768MB memory required per thread?

# rule ssp_quality_control:
#     input: # TODO: We should be able to run all BAMs through together
#         reads="results/mapped/sorted/{sample}.bam",
#         gt="/home/rabdill/snakemake-chipseq/resources/ssp/genometable.txt",
#         mptable="/home/rabdill/snakemake-chipseq/resources/ssp/mptable.txt"
#     output:
#         "{sample}"
#     log:
#         "logs/ssp/{sample}.log"
#     container:
#         ""
#     shell:
#         "ssp -i {input.reads} -o {sample} --odir results/qc --gt {input.gt} --mptable {input.mptable} -p 16"

rule remove_duplicate_reads:
    input:
        "results/mapped/sorted/{sample}.bam"
    output:
        "results/mapped/nodupes/{sample}.bam"
    log:
        "logs/picard/{sample}"
    container:
        "docker://broadinstitute/picard:2.27.1"
    resources:
        memory=32
    shell:
        "java -jar /usr/picard/picard.jar MarkDuplicates "
            "I={input} "
            "O={output} "
            "M=logs/picard/{wildcards[sample]}.txt "
            "REMOVE_DUPLICATES=true "
            "2> {log}"

rule remove_blacklisted:
    input:
        bam="results/mapped/nodupes/{sample}.bam",
        blacklist="/home/rabdill/snakemake-chipseq/resources/hg38-blacklist.v2.bed"
    output:
        # The regex valication here is NEEDED to prevent
        # a big infinite loop where snakemake is inferring
        # ever-growing values for "sample"
        "results/mapped/{sample,[\w\d]+-[\w\d]+}.bam"
    log:
        "logs/bedtools/{sample}"
    container:
        "docker://staphb/bedtools:2.30.0"
    resources:
        memory=12
    shell:
        "bedtools subtract -a {input.bam} -b {input.blacklist} "
        "> {output}"

rule count_reads_stages:
    input:
        "results/mapped/unsorted/{sample}.bam",
        #"results/mapped/sorted/{sample}.bam",
        "results/mapped/nodupes/{sample}.bam",
        "results/mapped/{sample}.bam"
    output:
        "results/readcounts/{sample}.txt"
    log:
        "logs/samtools/{sample}.counting"
    container:
        "docker://kfdrc/samtools:1.9"
    resources:
        memory=12
    shell:
        "bash scripts/counter.sh {input} {output} 2> {log}"

rule index_bam:
    input:
        "results/mapped/{sample}.bam"
    output:
        "results/mapped/{sample}.bam.bai"
    log:
        "logs/samtools/{sample}.index"
    container:
        "docker://kfdrc/samtools:1.9"
    resources:
        memory=12
    shell:
        "samtools index -@ 16 {input}"

# convert accessions to the name of the BAM file we expect:
inputfiles = {}
inputindices = {}
for chip, control in config["inputs"].items():
    inputfiles[chip] = f'results/mapped/{control}.bam'
    inputindices[chip] = f'results/mapped/{control}.bam.bai'

if config['bedgraph']:
    rule make_bedgraph:
        input:
            lb1="results/mapped/{sample}.bam",
            control=lambda wcs: inputfiles[wcs.sample],
            lb1_index="results/mapped/{sample}.bam.bai",
            control_index=lambda wcs: inputindices[wcs.sample],
        output:
            "results/{sample}.bedgraph"
        params:
            binsize=config['binsize']
        log:
            "logs/deeptools/{sample}.log"
        container:
            "docker://stjudecloud/deeptools:1.0.1"
        resources:
            memory=12
        shell:
            "bamCompare -b1 {input.lb1} -b2 {input.control} "
                "--binSize {params.binsize} --numberOfProcessors 16 "
                "--outFileFormat bedgraph --outFileName {output}"

if config['bigwig']:
    rule make_bigwig:
        input:
            lb1="results/mapped/{sample}.bam",
            control=lambda wcs: inputfiles[wcs.sample],
            lb1_index="results/mapped/{sample}.bam.bai",
            control_index=lambda wcs: inputindices[wcs.sample],
        output:
            "results/{sample}.bw"
        params:
            binsize=config['binsize']
        log:
            "logs/deeptools/{sample}.bw.log"
        container:
            "docker://stjudecloud/deeptools:1.0.1"
        resources:
            memory=12
        shell:
            "bamCompare -b1 {input.lb1} -b2 {input.control} "
                "--binSize {params.binsize} --numberOfProcessors 16 "
                "--outFileFormat bigwig --outFileName {output}"

# TODO: Incorporate MultiQC https://multiqc.info/