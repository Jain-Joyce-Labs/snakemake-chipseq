report: "report/workflow.rst"
configfile: "config/config.yaml"

def which_fastq(wildcards):
    if config['trim']:
        return(f"results/trimmed/{wildcards['sample']}.fastq.gz")
    else:
        return(f"resources/reads/{wildcards['sample']}.fastq.gz")

rule all:
    input:
        expand("results/{sample}.bedgraph", sample=config["inputs"].keys())

if config['trim']:
    rule fastqc_initial:
        input:
            "resources/reads/{sample}.fastq.gz"
        output:
            "results/qc/initial/fastqc_{sample}.html"
            "results/qc/initial/fastqc_{sample}.zip"
        container:
            "docker://staphb/fastqc:0.11.9"
        shell:
            "fastqc {input} --noextract --threads 16 --outdir results/qc/initial/"
    rule trimmomatic:
        input:
            "resources/reads/{sample}.fastq.gz"
        output:
            "results/trimmed/{sample}.fastq.gz"
        log:
            "logs/trimmomatic/{sample}.log"
        container:
            "docker://staphb/trimmomatic:0.38"
        shell:
            "java -jar /Trimmomatic-0.38/trimmomatic-0.38.jar SE -threads 16 {input} {output} SLIDINGWINDOW:4:20"
    rule fastqc_trimmed:
        input:
            "results/mapped/{sample}.bam" # this is aligned farther down
        output:
            "results/qc/trimmed/fastqc_{sample}.html"
            "results/qc/trimmed/fastqc_{sample}.zip"
        container:
            "docker://staphb/fastqc:0.11.9"
        shell:
            "fastqc {input} --noextract --threads 16 --outdir results/qc/trimmed/"

rule bwa_aln:
    input:
        "resources/bwa_ref/Homo_sapiens.GRCh38.dna_rm.primary_assembly.fa.gz",
        which_fastq
    output:
        temp("results/mapped/index/{sample}.sai")
    log:
        "logs/bwa/{sample}.log"
    container:
        "docker://biocontainers/bwa:v0.7.17_cv1"
    shell:
        "bwa aln -t 16 -q 5 -l 25 -k 2 {input} > {output}"

rule bwa_samse:
    input:
        "resources/bwa_ref/Homo_sapiens.GRCh38.dna_rm.primary_assembly.fa.gz",
        "results/mapped/index/{sample}.sai",
        which_fastq
    output:
        temp("results/mapped/{sample}.sam")
    log:
        "logs/bwa/{sample}.log"
    container:
        "docker://biocontainers/bwa:v0.7.17_cv1"
    shell:
        "bwa samse {input} > {output}"

rule sam_to_bam:
    input:
        "results/mapped/{sample}.sam"
    output:
        temp("results/mapped/{sample}.bam")
    log:
        "logs/samtools/{sample}.view.log"
    container:
        "docker://kfdrc/samtools:1.9"
    shell:
        "samtools view -S -b {input} > {output}"

rule sort_bam:
    input:
        "results/mapped/{sample}.bam"
    output:
        "results/mapped/{sample}.sorted.bam"
    log:
        "logs/samtools/{sample}.sort.log"
    container:
        "docker://kfdrc/samtools:1.9"
    shell:
        "samtools sort -l 7 -O bam -@ 16 -o {output} {input}"

rule index_bam:
    input:
        "results/mapped/{sample}.sorted.bam"
    output:
        "results/mapped/{sample}.sorted.bam.bai"
    log:
        "logs/samtools/{sample}.index.log"
    container:
        "docker://kfdrc/samtools:1.9"
    shell:
        "samtools index --threads 16 {input}"

# convert accessions to the name of the BAM file we expect:
inputfiles = {}
inputindices = {}
for chip, control in config["inputs"].items():
    inputfiles[chip] = f'results/mapped/{control}.sorted.bam'
    inputindices[chip] = f'results/mapped/{control}.sorted.bam.bai'

rule make_bedgraph:
    input:
        lb1="results/mapped/{sample}.sorted.bam",
        control=lambda wcs: inputfiles[wcs.sample],
        lb1_index="results/mapped/{sample}.sorted.bam.bai",
        control_index=lambda wcs: inputindices[wcs.sample],
    output:
        "results/{sample}.bedgraph"
    log:
        "logs/deeptools/{sample}.log"
    container:
        "docker://stjudecloud/deeptools:1.0.1"
    shell:
        "bamCompare -b1 {input.lb1} -b2 {input.control} "
            "--binSize {config[binsize]} --numberOfProcessors 16 "
            "--outFileFormat bedgraph --outFileName {output}"
